@import './utils/debug';

:root {
  --metaWithCharsetIncorrect: #{$meta-color};
  --viewportUserScalableWrong: #{$meta-color};
  --viewportMaximumScaleLessThan5: #{$meta-color};
  --metaXUACompatibleObsolete: #{$meta-color};
}

@mixin utf8 {
  meta[charset]:not([charset="UTF-8"]) {
    outline: 1px dotted var(--metaWithCharsetIncorrect);
  }
}

@mixin userScalable {
  meta[name="viewport"][content*="user-scalable=no"] {
    outline: 1px dotted var(--viewportUserScalableWrong);
  }
}

@mixin maximumScale {
  // https://web.dev/meta-viewport/
  meta[name="viewport"][content*="maximum-scale=1"],
  meta[name="viewport"][content*="maximum-scale=2"],
  meta[name="viewport"][content*="maximum-scale=3"],
  meta[name="viewport"][content*="maximum-scale=4"] {
    outline: 1px dotted var(--viewportMaximumScaleLessThan5);
  }
}

@mixin xuaCompatible {
  meta[http-equiv="X-UA-Compatible"],
  meta[http-equiv][content="IE=edge"] {
    outline: solid 1px var(--metaXUACompatibleObsolete);
  }
}

@if map-get($meta, "utf8") {
  @include showDebug("_meta.scss","utf8");
  @include utf8;
}

@if map-get($meta, "userScalable") {
  @include showDebug("_meta.scss","userScalable");
  @include userScalable;
}

@if map-get($meta, "maximumScale") {
  @include showDebug("_meta.scss","maximumScale");
  @include maximumScale;
}

@if map-get($meta, "xuaCompatible") {
  @include showDebug("_meta.scss","xuaCompatible");
  @include xuaCompatible;
}
